interface WordType<Type extends string> {
    type: Type;
}
interface SingularNounForms {
    nominativeSingular: string;
    genitiveSingular: string;
    dativeSingular: string;
    accusativeSingular: string;
    instrumentalSingular: string;
    prepositionalSingular: string;
}
interface PluralNounForms {
    nominativePlural: string;
    genitivePlural: string;
    dativePlural: string;
    accusativePlural: string;
    instrumentalPlural: string;
    prepositionalPlural: string;
}
export declare type SingularNoun = WordType<'singular noun'> & SingularNounForms;
export declare type PluralNoun = WordType<'plural noun'> & SingularNounForms;
export declare type Noun = WordType<'noun'> & SingularNounForms & PluralNounForms;
interface InvfinitiveVerbForms {
    infinitive: string;
}
interface IndicativePastVerbForms {
    indicativePastSingularMasculine: string;
    indicativePastSingularFeminine: string;
    indicativePastSingularNeuter: string;
    indicativePastPlural: string;
}
interface IndicativePresentVerbForms {
    indicativePresentSingularFirstPerson: string;
    indicativePresentSingularSecondPerson: string;
    indicativePresentSingularThirdPerson: string;
    indicativePresentPluralFirstPerson: string;
    indicativePresentPluralSecondPerson: string;
    indicativePresentPluralThirdPerson: string;
}
interface IndicativeFutureVerbForms {
    indicativeFutureSingularFirstPerson: string;
    indicativeFutureSingularSecondPerson: string;
    indicativeFutureSingularThirdPerson: string;
    indicativeFuturePluralFirstPerson: string;
    indicativeFuturePluralSecondPerson: string;
    indicativeFuturePluralThirdPerson: string;
}
interface ImperativeVerbForms {
    imperativeSingularSecondPerson: string;
    imperativePluralSecondPerson: string;
}
export declare type ImperfectiveVerb = WordType<'imperfective verb'> & InvfinitiveVerbForms & IndicativePastVerbForms & IndicativePresentVerbForms & ImperativeVerbForms;
export declare type PerfectiveVerb = WordType<'perfective verb'> & InvfinitiveVerbForms & IndicativePastVerbForms & IndicativeFutureVerbForms & ImperativeVerbForms;
interface InterjectionForms {
    interjection: string;
}
export declare type Interjection = WordType<'interjection'> & InterjectionForms;
interface AdverbForms {
    adverb: string;
}
interface QualifyingAdverbForms {
    comparative: string;
    superlative: string;
}
export declare type NonQualifyingAdverb = WordType<'non qualifying adverb'> & AdverbForms;
export declare type QualifyingAdverb = WordType<'qualifying adverb'> & AdverbForms & QualifyingAdverbForms;
interface PredicativeForms {
    predicative: string;
}
export declare type Predicative = WordType<'predicative'> & PredicativeForms;
export declare type Word = SingularNoun | PluralNoun | Noun | ImperfectiveVerb | PerfectiveVerb | Interjection | NonQualifyingAdverb | QualifyingAdverb | Predicative;
export {};
